"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var constants_1 = require("./constants");
/**
 * Wrapper for the express server.
 */
var InversifyExpressServer = /** @class */ (function () {
    /**
     * Wrapper for the express server.
     *
     * @param container Container loaded with all controllers and their dependencies.
     */
    function InversifyExpressServer(container, customRouter, routingConfig, customApp, authProvider) {
        this._container = container;
        this._router = customRouter || express.Router();
        this._routingConfig = routingConfig || {
            rootPath: constants_1.DEFAULT_ROUTING_ROOT_PATH
        };
        this._app = customApp || express();
        this._AuthProvider = authProvider;
        if (this._AuthProvider) {
            container.bind(constants_1.TYPE.AuthProvider)
                .to(this._AuthProvider);
        }
    }
    /**
     * Sets the configuration function to be applied to the application.
     * Note that the config function is not actually executed until a call to InversifyExpresServer.build().
     *
     * This method is chainable.
     *
     * @param fn Function in which app-level middleware can be registered.
     */
    InversifyExpressServer.prototype.setConfig = function (fn) {
        this._configFn = fn;
        return this;
    };
    /**
     * Sets the error handler configuration function to be applied to the application.
     * Note that the error config function is not actually executed until a call to InversifyExpresServer.build().
     *
     * This method is chainable.
     *
     * @param fn Function in which app-level error handlers can be registered.
     */
    InversifyExpressServer.prototype.setErrorConfig = function (fn) {
        this._errorConfigFn = fn;
        return this;
    };
    /**
     * Applies all routes and configuration to the server, returning the express application.
     */
    InversifyExpressServer.prototype.build = function () {
        // register server-level middleware before anything else
        if (this._configFn) {
            this._configFn.apply(undefined, [this._app]);
        }
        this.registerControllers();
        // register error handlers after controllers
        if (this._errorConfigFn) {
            this._errorConfigFn.apply(undefined, [this._app]);
        }
        return this._app;
    };
    InversifyExpressServer.prototype.registerControllers = function () {
        var _this = this;
        // Fake HttpContext is needed during registration
        this._container.bind(constants_1.TYPE.HttpContext).toConstantValue({});
        var controllers = this._container.getAll(constants_1.TYPE.Controller);
        controllers.forEach(function (controller) {
            var controllerMetadata = Reflect.getOwnMetadata(constants_1.METADATA_KEY.controller, controller.constructor);
            var methodMetadata = Reflect.getOwnMetadata(constants_1.METADATA_KEY.controllerMethod, controller.constructor);
            var parameterMetadata = Reflect.getOwnMetadata(constants_1.METADATA_KEY.controllerParameter, controller.constructor);
            if (controllerMetadata && methodMetadata) {
                var router = express.Router();
                var controllerMiddleware_1 = _this.resolveMidleware.apply(_this, controllerMetadata.middleware);
                methodMetadata.forEach(function (metadata) {
                    var paramList = [];
                    if (parameterMetadata) {
                        paramList = parameterMetadata[metadata.key] || [];
                    }
                    var handler = _this.handlerFactory(controllerMetadata.target.name, metadata.key, paramList);
                    var routeMiddleware = _this.resolveMidleware.apply(_this, metadata.middleware);
                    (_a = _this._router)[metadata.method].apply(_a, ["" + controllerMetadata.path + metadata.path].concat(controllerMiddleware_1, routeMiddleware, [handler]));
                    var _a;
                });
            }
        });
        this._app.use(this._routingConfig.rootPath, this._router);
    };
    InversifyExpressServer.prototype.resolveMidleware = function () {
        var _this = this;
        var middleware = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            middleware[_i] = arguments[_i];
        }
        return middleware.map(function (middlewareItem) {
            try {
                return _this._container.get(middlewareItem);
            }
            catch (_) {
                return middlewareItem;
            }
        });
    };
    InversifyExpressServer.prototype.handlerFactory = function (controllerName, key, parameterMetadata) {
        var _this = this;
        return function (req, res, next) {
            var args = _this.extractParameters(req, res, next, parameterMetadata);
            (function () { return __awaiter(_this, void 0, void 0, function () {
                var httpContext, childContainer, result, _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this._getHttpContext(req, res, next)];
                        case 1:
                            httpContext = _b.sent();
                            childContainer = this._container.createChild();
                            childContainer.bind(constants_1.TYPE.HttpContext)
                                .toConstantValue(httpContext);
                            result = (_a = childContainer.getNamed(constants_1.TYPE.Controller, controllerName))[key].apply(_a, args);
                            Promise.resolve(result)
                                .then(function (value) {
                                if (value && !res.headersSent) {
                                    res.send(value);
                                }
                            })
                                .catch(function (error) { return next(error); });
                            return [2 /*return*/];
                    }
                });
            }); })();
        };
    };
    InversifyExpressServer.prototype._getHttpContext = function (req, res, next) {
        return __awaiter(this, void 0, void 0, function () {
            var principal, httpContext;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this._getCurrentUser(req, res, next)];
                    case 1:
                        principal = _a.sent();
                        httpContext = {
                            request: req,
                            response: res,
                            user: principal
                        };
                        return [2 /*return*/, httpContext];
                }
            });
        });
    };
    InversifyExpressServer.prototype._getCurrentUser = function (req, res, next) {
        return __awaiter(this, void 0, void 0, function () {
            var authProvider;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this._AuthProvider !== undefined)) return [3 /*break*/, 2];
                        authProvider = this._container.get(constants_1.TYPE.AuthProvider);
                        return [4 /*yield*/, authProvider.getUser(req, res, next)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [2 /*return*/, Promise.resolve({
                            details: null,
                            isAuthenticated: function () { return Promise.resolve(false); },
                            isInRole: function (role) { return Promise.resolve(false); },
                            isResourceOwner: function (resourceId) { return Promise.resolve(false); }
                        })];
                }
            });
        });
    };
    InversifyExpressServer.prototype.extractParameters = function (req, res, next, params) {
        var args = [];
        if (!params || !params.length) {
            return [req, res, next];
        }
        for (var _i = 0, params_1 = params; _i < params_1.length; _i++) {
            var item = params_1[_i];
            switch (item.type) {
                default:
                    args[item.index] = res;
                    break; // response
                case constants_1.PARAMETER_TYPE.REQUEST:
                    args[item.index] = this.getParam(req, null, item.parameterName);
                    break;
                case constants_1.PARAMETER_TYPE.NEXT:
                    args[item.index] = next;
                    break;
                case constants_1.PARAMETER_TYPE.PARAMS:
                    args[item.index] = this.getParam(req, "params", item.parameterName);
                    break;
                case constants_1.PARAMETER_TYPE.QUERY:
                    args[item.index] = this.getParam(req, "query", item.parameterName);
                    break;
                case constants_1.PARAMETER_TYPE.BODY:
                    args[item.index] = this.getParam(req, "body", item.parameterName);
                    break;
                case constants_1.PARAMETER_TYPE.HEADERS:
                    args[item.index] = this.getParam(req, "headers", item.parameterName);
                    break;
                case constants_1.PARAMETER_TYPE.COOKIES:
                    args[item.index] = this.getParam(req, "cookies", item.parameterName);
                    break;
            }
        }
        args.push(req, res, next);
        return args;
    };
    InversifyExpressServer.prototype.getParam = function (source, paramType, name) {
        var param = (paramType !== null) ? source[paramType] : source;
        return param[name] || this.checkQueryParam(paramType, param);
    };
    InversifyExpressServer.prototype.checkQueryParam = function (paramType, param) {
        if (paramType === "query") {
            return undefined;
        }
        else {
            return param;
        }
    };
    return InversifyExpressServer;
}());
exports.InversifyExpressServer = InversifyExpressServer;
